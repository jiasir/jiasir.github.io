<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on jiasir</title><link>https://jiasir.io/tags/python/</link><description>Recent content in Python on jiasir</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 16 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://jiasir.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>How Python Decorator Works</title><link>https://jiasir.io/posts/2017/how-python-decorator-works/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://jiasir.io/posts/2017/how-python-decorator-works/</guid><description>Decorators provide a simple syntax for calling higher-order functions. A decorator is a function that takes another function and extends the behavior of the latter function without explicitly modifying it.
How function works Functions return a value based on the given arguments.
def foo(bar): return bar + 1 print(foo(2)) # will print 3 What is first class object All objects that could be named in the language (e.</description></item></channel></rss>