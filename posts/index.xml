<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on jiasir</title><link>https://jiasir.io/posts/</link><description>Recent content in Posts on jiasir</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Apr 2022 16:39:48 +0800</lastBuildDate><atom:link href="https://jiasir.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Availability Chart</title><link>https://jiasir.io/posts/2022/availability-chart/</link><pubDate>Tue, 19 Apr 2022 16:39:48 +0800</pubDate><guid>https://jiasir.io/posts/2022/availability-chart/</guid><description>Here is a table of availability levels for reference Level Per Year Per Quarter Per 30 Days 95% 18d 9d 3d 99% 3d 21h 7h 99.9% 8h 2h 43m 99.95% 4h 1h 21m 99.99% 52m 12m 4m 99.999% 5m 1m 25s</description></item><item><title>Git Cheat Sheet</title><link>https://jiasir.io/posts/2022/git-cheat-sheet/</link><pubDate>Sun, 17 Apr 2022 17:38:22 +0800</pubDate><guid>https://jiasir.io/posts/2022/git-cheat-sheet/</guid><description>Commits的关联关系 Git用username关联commits GitHub用电子邮件关联commits 全局设置 git config --global user.name &amp;#34;user-name&amp;#34; # 设置username git config --global user.email &amp;#34;email&amp;#34; # 设置email git config --global credential.helper osxkeychain # 设置密码通过osxkeychain保存 仓库级别设置 git config user.name &amp;#34;user-name&amp;#34; git config user.email &amp;#34;email&amp;#34; 列出全局设置 git config --global --list 设置upstream git branch -u origin/branch_name # 设定当前分支的upstream为origin/branch_name 删除remote branch git branch -d branch_name # delete local branch git push origin :branch_name # delete remote branch git push -d origin branch_name # delete remote branch Find branch tracking git remote show origin Push local new branch to remote git branch branch_name git checkout branch_name git push -u origin branch_name # 注意格式： git push [remote] [local_branch] [remote_branch]，如果remote_branch没有local_branch，则会被创建 设置credential helper git config --global credential.</description></item><item><title>What is the Difference Between DevOps and SRE</title><link>https://jiasir.io/posts/2022/what-is-the-difference-between-devops-and-sre/</link><pubDate>Sun, 17 Apr 2022 16:46:43 +0800</pubDate><guid>https://jiasir.io/posts/2022/what-is-the-difference-between-devops-and-sre/</guid><description>DevOps分解的5个关键领域 Reduce Organization Silos：减少组织沉默。打破团队之间的障碍，增加协作。 Accept failure as Normal：接受正常的失败。计算机本质上是不可靠的，所以我们不能期望完美。 Implement Gradual Change：实施渐进式变更。小的变更更容易审查，渐进式变更能减少平均恢复时间，使回滚更简单。 Leverage Tooling &amp;amp; Automation：利用工具和自动化。 Measure Everything：衡量一切。衡量是成功的标准，如果没发衡量，那么我们就无法知道前四个支柱是否成功。 DevOps VS SRE 如果DevOps被看作是一种哲学，那么SRE是实现该哲学的一种规范方式 如果DevOps是编程语言中的一个接口，那么SRE是一个实现DevOps的具体类 class SRE implements DevOps SRE的具体实现 Reduce Organization Silos Share ownership：与开发人员共享生产所有权，通过相同的工具确保每个人都有相同的观点和相同的方法来处理生产，降低对于生产的模糊。 Accept failure as Normal SLOs &amp;amp; Blameless PMs：我们有没有可指责的事后分析，确保相同问题不会再次发生。 Implement Gradual Change Reduce costs of failure：在完全发布到生产之前，做大量的灰度发布。 Leverage Tooling &amp;amp; Automation Automate this year’s job away：尽可能的消除手工工作，衡量我们最近一年有多少手工工作，将今年的工作自动化 Measure Everything Measure toil and reliability：衡量我们自己的工作量以及系统的可靠性和健康状况的衡量标准</description></item><item><title>Replace Strings With Sed in Directory and Sub Directories</title><link>https://jiasir.io/posts/2017/replace-strings-with-sed-in-directory-and-sub-directories/</link><pubDate>Mon, 20 Mar 2017 00:00:00 +0000</pubDate><guid>https://jiasir.io/posts/2017/replace-strings-with-sed-in-directory-and-sub-directories/</guid><description>The first line occurrences of &amp;ldquo;foo&amp;rdquo; will be replaced with &amp;ldquo;bar&amp;rdquo;. And you can using the second line to check.
grep -rl &amp;#39;foo&amp;#39; . | xargs sed -i &amp;#39;s/foo/bar/g&amp;#39; grep &amp;#39;foo&amp;#39; -r * | awk -F: {&amp;#39;print $1&amp;#39;} | sort -n | uniq -c</description></item><item><title>How Python Decorator Works</title><link>https://jiasir.io/posts/2017/how-python-decorator-works/</link><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid>https://jiasir.io/posts/2017/how-python-decorator-works/</guid><description>Decorators provide a simple syntax for calling higher-order functions. A decorator is a function that takes another function and extends the behavior of the latter function without explicitly modifying it.
How function works Functions return a value based on the given arguments.
def foo(bar): return bar + 1 print(foo(2)) # will print 3 What is first class object All objects that could be named in the language (e.</description></item><item><title>Git Merge With a Merge Commit</title><link>https://jiasir.io/posts/2017/git-merge-with-a-merge-commit/</link><pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate><guid>https://jiasir.io/posts/2017/git-merge-with-a-merge-commit/</guid><description>Git does a fast forward when you merge branch that is ahead of your checked-out branch, git only update the branch pointer. Some people don&amp;rsquo;t like that and want to see a explicit merge.
git checkout develop git merge --no-ff myfeature git push origin develop The --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature.</description></item><item><title>Rename Git Branch Locally and Remotely</title><link>https://jiasir.io/posts/2017/rename-git-branch-locally-and-remotely/</link><pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate><guid>https://jiasir.io/posts/2017/rename-git-branch-locally-and-remotely/</guid><description>There are three steps to rename git branch locally and remotely.
git branch -m old_branch new_branch # Rename branch locally git push origin :old_branch # Delete the old branch remotely git push --set-upstream origin new_branch # Push the new branch, set local branch to track the new remote And this is also works to rename the currently checked out branch.
git branch -m new_branch If you want to delete branch locally and remotely.</description></item><item><title>Why I Decided to Develop Playback</title><link>https://jiasir.io/posts/2017/why-i-decided-to-develop-playback/</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate><guid>https://jiasir.io/posts/2017/why-i-decided-to-develop-playback/</guid><description>Since March 2015 I decided to develop a new automated deployment tool for OpenStack called the Playback. Because I tried almost all popular tools and We need a low learning cost, flexible, production-oriented high-availability level automated build tool. Below is a simple comparison of some open source solutions:
Juju solutions for OpenStack OpenStack Autopilot puppetlabs-openstack openstack-ansible Kolla RDO(Packstack) TripleO Juju solutions for OpenStack Juju is a good tool for provisioning and orchestration, but bad to deploy OpenStack.</description></item><item><title>Multiple Provider Network Configuration in Mitaka</title><link>https://jiasir.io/posts/2017/multiple-provider-network-configuration-in-mitaka/</link><pubDate>Thu, 23 Feb 2017 00:00:00 +0000</pubDate><guid>https://jiasir.io/posts/2017/multiple-provider-network-configuration-in-mitaka/</guid><description>Neutron provider VLANs are Neutron networks that map directly to an 802.1Q VLAN in the cloud provider&amp;rsquo;s physical network infrastructure.
This is the example configuration of neutron network node:
On the neutron.conf file:
[DEFAULT] core_plugin = ml2 service_plugins = router On the ml2_conf.ini file:
[ml2] type_drivers = flat,vlan,vxlan tenant_network_types = vxlan mechanism_drivers = linuxbridge,l2population extension_drivers = port_security [ml2_type_flat] flat_networks = provider [ml2_type_vlan] network_vlan_ranges = provider [securitygroup] firewall_driver = iptables We also need to configure the physical switches as trunk not access mode:</description></item></channel></rss>